generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum User_roles {
  ADMIN
  ALUMNO
  PROFESOR
}

model Usuario {
  matricula String     @id @db.VarChar(7)
  nombre    String     @db.VarChar(30)
  apellidos String     @db.VarChar(30)
  correo    String     @unique @db.VarChar(30)
  password  String     @db.VarChar(100)
  rol       User_roles

  id_grupo String?
  fk_grupo Grupo?  @relation(name: "alumno_grupo", fields: [id_grupo], references: [id])

  fk_grupo_maestro Grupo[] @relation(name: "maestro_grupo")

  fk_actividad   ActividadContestada[]
  fk_publicacion Publicacion[]
}

model Grupo {
  id         String  @id @db.VarChar(12)
  id_maestro String
  fk_maestro Usuario @relation(name: "maestro_grupo", fields: [id_maestro], references: [matricula])

  fk_alumnos     Usuario[]     @relation(name: "alumno_grupo")
  fk_publicacion Publicacion[]
  fk_actividad   Actividad[]
}

model Publicacion {
  id                String   @id @default(uuid())
  titulo            String   @db.VarChar(500)
  contenido         String   @db.VarChar(500)
  id_material       String   @db.VarChar(50)
  fecha_publicacion DateTime

  id_grupo String
  fk_grupo Grupo  @relation(references: [id], fields: [id_grupo], onDelete: Cascade)

  id_profesor String
  fk_profesor Usuario @relation(references: [matricula], fields: [id_profesor], onDelete: Cascade)
}

model ActividadContestada {
  id    String   @id @default(uuid())
  fecha DateTime @db.DateTime()

  id_alumno String  @db.VarChar(38)
  fk_alumno Usuario @relation(references: [matricula], fields: [id_alumno], onDelete: Cascade)

  id_actividad String    @db.VarChar(38)
  fk_actividad Actividad @relation(fields: [id_actividad], references: [id], onDelete: Cascade)

  @@unique([id_alumno, id_actividad])
}

model Actividad {
  id               String   @id @default(uuid())
  nombre           String   @db.VarChar(38)
  fecha_creacion   DateTime @db.DateTime()
  fecha_activacion DateTime @db.DateTime()
  fecha_limite     DateTime @db.DateTime()

  id_grupo String @db.VarChar(12)
  fk_grupo Grupo  @relation(references: [id], fields: [id_grupo], onDelete: Cascade)

  fk_pregunta   Pregunta[]
  fk_contestada ActividadContestada[]
}

model Pregunta {
  id       String @id @default(uuid())
  pregunta String @db.VarChar(150)

  id_actividad String    @db.VarChar(40)
  fk_actividad Actividad @relation(fields: [id_actividad], references: [id], onDelete: Cascade)

  fk_respuesta           Respuesta[]
  fk_pregunta_respondida PreguntaRespondida[]
}

model Respuesta {
  id         String  @id @default(uuid())
  respuesta  String  @db.VarChar(200)
  esCorrecta Boolean

  id_pregunta String   @db.VarChar(40)
  fk_pregunta Pregunta @relation(fields: [id_pregunta], references: [id], onDelete: Cascade)

  fk_respuesta_seleccionada PreguntaRespondida[]
}

model PreguntaRespondida {
  id String @id @default(uuid())

  id_pregunta String   @db.VarChar(40)
  fk_pregunta Pregunta @relation(fields: [id_pregunta], references: [id], onDelete: Cascade)

  id_respuesta String    @db.VarChar(40)
  fk_respuesta Respuesta @relation(fields: [id_respuesta], references: [id], onDelete: Cascade)
}
